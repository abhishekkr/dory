#!/bin/bash

THIS_DIR=$(pwd)
cd $(dirname $0)
MY_DIR=$(pwd)
cd ${THIS_DIR}

[[ -z "${MY_GOPATH}" ]] && export MY_GOPATH=$(basename $MY_DIR)
[[ -z "${GO_MAIN_FILE}" ]] && export GO_MAIN_FILE="main.go"

# managing go deps
#############################################################################

export GO_GET_PKG_FILE="go-get-pkg.txt"

#############################################################################
##### from github.com/abhishekkr/dotfiles/shell_profile/a.golang.sh

add-goimports-to-list(){
  local GO_GET_PKG_FILEPATH="$1"
  go list -f {{.Deps}} | sed 's/^\[//' | sed 's/\]$//' | sed -E 's/\s+/\n/ig' > "${GO_GET_PKG_FILEPATH}"
}

goenv-on-at(){
  if [ $# -eq 0 ]; then
    _GOPATH_VALUE="${PWD}/.goenv"
  else
    cd "$1" ; _GOPATH_VALUE="${1}/.goenv" ; cd -
  fi
  if [ ! -d $_GOPATH_VALUE ]; then
    mkdir -p "${_GOPATH_VALUE}/site"
  fi
  export _OLD_GOPATH=$GOPATH
  export _OLD_PATH=$PATH
  export GOPATH=$_GOPATH_VALUE/site
  export PATH=$PATH:$GOPATH/bin

  if [ ! -d "${GOPATH}/src/${MY_GOPATH}" ]; then
    mkdir -p $(dirname "${GOPATH}/src/${MY_GOPATH}")
    ln -sf "${PWD}" "${GOPATH}/src/${MY_GOPATH}"
  fi

  echo "your new GOPATH is at $GOPATH"
}
alias goenv_on="goenv-on-at \$PWD"
alias goenv_off="export GOPATH=$_OLD_GOPATH ; export PATH=$_OLD_PATH ; unset _OLD_PATH ; unset _OLD_GOPATH"

go-get-pkg-help(){
  echo "go-get-pkg handles your Golang Project dependencies."
  echo ""
  echo "* Create new dependency list or install from existing:"
  echo "  $ $0 deps"
  echo ""
  echo "* Install from existing with updated dependencies"
  echo "  $ GO_GET_UPDATE=true $0 deps"
  echo ""
  echo "* Install from existing with re-prepared binaries (required on new Golang update or local changed dependency code)"
  echo "  $ GO_GET_RENEW=true $0 deps"
  echo ""
  echo "* Install from existing with updated dependencies (re-prepared binaries even if no updates)"
  echo "  $ GO_GET_RENEW=true GO_GET_UPDATE=true $0 deps"
}

go-get-pkg-list-create(){
  if [ ! -f "$1" ]; then
    PKG_LISTS_DIR=$(dirname $PKG_LISTS)
    mkdir -p "$PKG_LISTS_DIR" && unset PKG_LISTS_DIR

    touch "${1}"
    add-goimports-to-list "${1}"

    echo "Created GoLang Package empty list ${PKG_LISTS}"
    echo "Start adding package paths as separate lines."
  fi
}

go-get-pkg-install(){
  for pkg_list in $PKG_LISTS; do
    cat $pkg_list | while read pkg_path; do
        echo "fetching golag package: go get ${pkg_path}";
        pkg_import_path=$(echo $pkg_path | awk '{print $NF}')
        if [[ ! -z $GO_GET_RENEW ]]; then
          rm -rf "${GOPATH}/pkg/${GOOS}_${GOARCH}/${pkg_import_path}"
          echo "cleaning old pkg for ${pkg_import_path}"
        fi
        if [[ -z $GO_GET_UPDATE ]]; then
          echo $pkg_path | xargs go get
        else
          echo $pkg_path | xargs go get -u
        fi
    done
  done

  unset GO_GET_UPDATE GO_GET_RENEW
}

go-get-pkg-file(){
  if [[ $# -eq 0 ]]; then
    PKG_LISTS="$PWD/${GO_GET_PKG_FILE}"
  else
    PKG_LISTS=($@)
    if [[ -d "$PKG_LISTS" ]]; then
      PKG_LISTS="${PKG_LISTS}/${GO_GET_PKG_FILE}"
    fi
  fi
  echo "${PKG_LISTS}"
}

go-get-pkg(){
  if [[ "$1" == "help" ]]; then
    go-get-pkg-help
    return 0
  fi

  PKG_LISTS=$(go-get-pkg-file $@)

  go-get-pkg-list-create $PKG_LISTS

  if [[ -z $GO_GET_ENV ]]; then
    _GO_GET_ENV=$(dirname $PKG_LISTS)
    GO_GET_ENV=$(cd $_GO_GET_ENV ; pwd ; cd - >/dev/null)
  fi
  goenv-on-at $GO_GET_ENV

  go-get-pkg-install "$PKG_LISTS"

  unset _GO_GET_ENV GO_GET_ENV PKG_LISTS
}

go-get-pkg-refresh(){
  if [[ "$1" == "help" ]]; then
    go-get-pkg-help
    return 0
  fi

  PKG_LISTS=$(go-get-pkg-file $@)
  rm -f "${PKG_LISTS}"

  go-get-pkg $@
}

build-for-all(){
  local FOR_OS_ARCH="$1"
  local GO_MAIN_BIN=$(echo "${GO_MAIN_FILE}" | sed 's/.go$//')

  [[ ! -f "${GO_MAIN_FILE}" ]] && \
    echo "[error] missing main file ${GO_MAIN_FILE}, set correct env for GO_MAIN_FILE" && \
    exit 123

  mkdir -p ./bin
  for GOOS in darwin linux windows; do
    for GOARCH in 386 amd64; do
      [[ ! -z "${FOR_OS_ARCH}" && "${GOOS}-${GOARCH}" != "${FOR_OS_ARCH}" ]] && continue
      echo "building for $GOOS - $GOARCH"
      go build -o ./bin/${GO_MAIN_BIN}-$GOOS-$GOARCH "${GO_MAIN_FILE}"
    done
  done
}

all-paths-with-go-files(){
  find . -maxdepth 1 -type d | grep -v -E '^\.$|^./\.git$|^./\.goenv$|^./temp$|^./vendor$'
}

go-vet-all(){
  go tool vet -all *.go
  for loc in $(all-paths-with-go-files); do
    go tool vet -all ${loc}
  done
}

go-errcheck(){
  go get github.com/kisielk/errcheck

  for loc in $(all-paths-with-go-files); do
    find ${loc} -type f -name *.go | xargs -I {} errcheck -abspath -asserts -blank -verbose {}
  done
}

go-safesql(){
  go get github.com/stripe/safesql

  for loc in $(all-paths-with-go-files); do
    safesql -q=false ${loc}
  done
}

go-reporter(){
  go get github.com/360EntSecGroup-Skylar/goreporter

  for loc in $(all-paths-with-go-files); do
    goreporter -p ${loc} -f html
  done

  mkdir -p spec-reports/goreporter
  mv ./pkg-*-*-*-*-*-*.html ./spec-reports/goreporter
}

go-quality-check(){
  echo ""
  echo "### running ~ *go vet*"
  echo ""
  go-vet-all
  echo ""
  echo "----------------------------------------------------------------------"
  echo ""

  echo ""
  echo "### running ~ *errorcheck*"
  echo ""
  go-errcheck
  echo ""
  echo "----------------------------------------------------------------------"
  echo ""

  echo ""
  echo "### running ~ *safesql*"
  echo ""
  go-safesql
  echo ""
  echo "----------------------------------------------------------------------"
  echo ""

  echo ""
  echo "### running ~ *goreporter*"
  echo ""
  go-reporter
  echo ""
  echo "----------------------------------------------------------------------"
  echo ""
}

##############################################################################

_OLD_PWD=$PWD
cd $(dirname $0)

if [[ "$1" == "deps" ]]; then
  goenv-on-at $PWD
  go-get-pkg

elif [[ "$1" == "deps-refresh" ]]; then
  goenv-on-at $PWD
  go-get-pkg-refresh

elif [[ "$1" == "run" ]]; then
  goenv-on-at $PWD
  go run $(dirname $0)/${GO_MAIN_FILE} ${@:2}

elif [[ "$1" == "build" ]]; then
  bash $0 deps
  GOPATH="$PWD/.goenv/site"
  build-for-all "$2"

elif [[ "$1" == "quality" ]]; then
  bash $0 deps
  GOPATH="$PWD/.goenv/site"
  go-quality-check

else
  echo "Use it wisely..."
  echo ""
  echo "Build usable binaries: '$0 build'"
  echo ""
  echo "Install tall Go lib dependencies: '$0 deps'"
  go-get-pkg-help
  echo ""
  echo "Install tall Go lib dependencies: '$0 deps-refresh'"

fi

cd $_OLD_PWD
